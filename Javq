package com.example.demo.util;

import java.lang.reflect.Method;
import java.util.Map;

public class BeanTransformer {

    // Generic method to transform one object to another with custom field mappings
    public static <S, T> T transform(S source, Class<T> targetClass, Map<String, String> fieldMappings) {
        try {
            T target = targetClass.getDeclaredConstructor().newInstance();

            Method[] sourceMethods = source.getClass().getMethods();
            Method[] targetMethods = targetClass.getMethods();

            for (Method sourceMethod : sourceMethods) {
                if (sourceMethod.getName().startsWith("get")) {
                    String sourceFieldName = sourceMethod.getName().substring(3);
                    Object value = sourceMethod.invoke(source);

                    // Determine target field name based on mappings or use source field name
                    String targetFieldName = fieldMappings.getOrDefault(sourceFieldName, sourceFieldName);

                    // Find corresponding setter in the target class
                    for (Method targetMethod : targetMethods) {
                        if (targetMethod.getName().equals("set" + targetFieldName) &&
                            targetMethod.getParameterCount() == 1 &&
                            targetMethod.getParameterTypes()[0].isAssignableFrom(sourceMethod.getReturnType())) {

                            targetMethod.invoke(target, value);
                            break;
                        }
                    }
                }
            }
            return target;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}
